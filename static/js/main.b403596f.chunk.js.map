{"version":3,"sources":["main/bll/auth-actions.ts","features/profile/Profile.tsx","components/input/Input.tsx","components/button/Button.tsx","main/dal/API.ts","features/recoveryPass/RecoveryPass.tsx","main/ui/error-404/Error404.tsx","components/checkbox/Checkbox.tsx","components/TestPage.tsx","components/spinner/Spinner.tsx","features/login/Login.tsx","features/signUp/SignUp.tsx","main/ui/header/Header.tsx","features/setNewPassword/SetNewPassword.tsx","main/ui/routes/Routes.tsx","main/bll/authReducer.ts","main/bll/store.ts","main/ui/App.tsx","reportWebVitals.ts","index.tsx","main/ui/error-404/Error.module.css","components/input/Input.module.css","components/button/Button.module.scss","components/checkbox/Checkbox.module.css","components/TestPage.module.scss"],"names":["AuthEnum","Profile","Input","type","onChange","defaultValue","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","superInput","errorInput","e","currentTarget","value","key","Button","finalClassName","myButton","instanceHeroku","axios","create","baseURL","authAPI","loginObj","post","then","res","data","singUpObj","email","from","message","newPasswordObj","registerAC","name","_id","isRegister","IS_REGISTER","payload","loadingSpinner","IS_LOADING","isLoading","authentication","IS_AUTH","isAuth","RecoveryPass","useState","triedToSubmit","setTriedToSubmit","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","a","info","alert","response","resetForm","handleSubmit","action","htmlFor","getFieldProps","touched","errors","style","color","onClick","Error404","errorNumber","errorMessage","cat","Checkbox","onChangeChecked","children","checkbox","checked","TestPage","testPageBlock","Spinner","Login","useSelector","state","user","setEmail","password","setPassword","validEmail","setValidEmail","validPassword","setValidPassword","checkedInput","setCheckedInput","to","PATH","PROFILE","target","SIGNUP","rememberMe","avatar","LOGIN","onMouseDown","RegExp","test","length","SignUp","passwordConfirmation","setPasswordConfirmation","errorsEmail","setErrorsEmail","errorsPassword","setErrorsPassword","errorsPasswordConfirmation","setErrorsPasswordConfirmation","validateDate","onBlur","placeholder","addedUser","href","Header","navBarItems","title","link","TESTPAGE","RECOVERY","map","el","activeClassName","SetNewPassword","token","useParams","confirmPass","min","oneOf","newPass","resetPasswordToken","SETNEWPASSWORD","Routes","path","exact","render","initialState","rootReducer","combineReducers","LOGOUT","UPDATE_USER","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b403596f.chunk.js","sourcesContent":["import {authAPI, AuthObjType, NewPasswordObjType} from '../dal/API'\r\nimport {ThunkType} from './store';\r\n\r\n// TYPES\r\nexport enum AuthEnum {\r\n    LOGIN = 'AUTH/LOGIN',\r\n    LOGOUT = 'AUTH/LOGOUT',\r\n    UPDATE_USER = 'AUTH/UPDATE_USER',\r\n    IS_LOADING = 'AUTH/IS_LOADING',\r\n    IS_AUTH = 'AUTH/IS_AUTH',\r\n    IS_REGISTER = \"IS_REGISTER\"\r\n}\r\n\r\nexport type AuthActionsTypes = ReturnType<typeof login>\r\n    | ReturnType<typeof logOut>\r\n    | ReturnType<typeof updateUser>\r\n    | ReturnType<typeof loadingSpinner>\r\n    | ReturnType<typeof authentication>\r\n    | ReturnType<typeof registerAC>\r\n\r\n// ACTION CREATORS\r\nexport const login = (payload: { name: string, _id: string, avatar?: string }) => ({\r\n    type: AuthEnum.LOGIN,\r\n    payload\r\n} as const)\r\nexport const logOut = () => ({type: AuthEnum.LOGOUT} as const)\r\nexport const updateUser = (payload: { name?: string, avatar?: string }) => ({\r\n    type: AuthEnum.UPDATE_USER,\r\n    payload\r\n} as const)\r\nexport const registerAC = (name: string, _id: string, isRegister: boolean) => ({\r\n    type: AuthEnum.IS_REGISTER,\r\n    payload: {name, _id, isRegister}\r\n} as const)\r\nexport const loadingSpinner = (value: boolean) => ({type: AuthEnum.IS_LOADING, payload: {isLoading: value}} as const)\r\nexport const authentication = (value: boolean) => ({type: AuthEnum.IS_AUTH, payload: {isAuth: value}} as const)\r\n\r\n// THUNK CREATORS\r\nexport const setLogOut = (): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            let resp = await authAPI.logOut()\r\n            console.log(resp)\r\n            dispatch(logOut())\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error)\r\n        }\r\n    }\r\nexport const setLogin = (data: AuthObjType): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(loadingSpinner(true))\r\n            const {name, avatar, _id} = await authAPI.login(data)\r\n            dispatch(login({name, avatar, _id}))\r\n            dispatch(authentication(true))\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            alert(error)\r\n        } finally {\r\n            dispatch(loadingSpinner(false))\r\n        }\r\n    }\r\nexport const registerTC = (data: AuthObjType): ThunkType =>\r\n    async dispatch => {\r\n        dispatch(loadingSpinner(true))\r\n        try {\r\n            const res = await authAPI.signUp(data)\r\n            const {name, _id} = res.data.addedUser\r\n            dispatch(registerAC(name, _id, true))\r\n            dispatch(authentication(true))\r\n        } catch (e) {\r\n            alert(e.response.data.error)\r\n        } finally {\r\n            dispatch(loadingSpinner(false))\r\n        }\r\n    }\r\nexport const setRecovery = (email: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(loadingSpinner(true))\r\n        const {info} = await authAPI.recovery(email)\r\n        alert(info)\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        alert(error)\r\n    } finally {\r\n        dispatch(loadingSpinner(false))\r\n    }\r\n}\r\nexport const setNewPassword = (data: NewPasswordObjType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(loadingSpinner(true))\r\n        const {info} = await authAPI.setNewPassword(data)\r\n        alert(info)\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        alert(error)\r\n    } finally {\r\n        dispatch(loadingSpinner(false))\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from './Input.module.css';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n  onChangeText?: (value: string) => void\r\n  onEnter?: () => void\r\n  error?: string\r\n  spanClassName?: string\r\n  defaultValue?: string\r\n};\r\n\r\nconst Input: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n      type, onChange, defaultValue,\r\n      onChangeText,\r\n      onKeyPress, onEnter,\r\n      error,\r\n      className, spanClassName,\r\n\r\n      ...restProps\r\n    }\r\n) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e);\r\n\r\n    onChangeText && onChangeText(e.currentTarget.value);\r\n  }\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    e.key === 'Enter' && onEnter && onEnter()\r\n  }\r\n\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\r\n  const finalInputClassName = `${s.superInput} ${error ? s.errorInput : s.superInput}`;\r\n\r\n  return (\r\n      <>\r\n        <input\r\n            type={type} // изменил на type был просто текст\r\n            onChange={onChangeCallback}\r\n            onKeyPress={onKeyPressCallback}\r\n            className={finalInputClassName}\r\n            defaultValue={defaultValue}\r\n\r\n            {...restProps}\r\n        />\r\n        {error && <span className={finalSpanClassName}>{error}</span>}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./Button.module.scss\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    error?: boolean | string\r\n}\r\n\r\nconst Button: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        error, className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${error ? s.error : s.myButton} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import axios from \"axios\"\r\n\r\nconst instanceLocal = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0/',\r\n})\r\n\r\nconst instanceHeroku = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n})\r\n\r\nexport type AuthObjType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\ntype UpdateMeObjType = {\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type NewPasswordObjType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\ntype AuthMeResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n\r\n    error?: string;\r\n}\r\n\r\ntype AuthResponseType = {\r\n    info: string,\r\n    error?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    ping() {\r\n        return instanceHeroku.get(`ping?frontTime=${Date.now()}`)\r\n    },\r\n    login(loginObj: AuthObjType) {\r\n        return instanceHeroku.post<AuthMeResponseType>('auth/login', loginObj).then(res=>res.data)\r\n    },\r\n    logOut() {\r\n        return instanceHeroku.delete<AuthResponseType>(`auth/me`)\r\n    },\r\n    signUp(singUpObj: AuthObjType) {\r\n        return instanceHeroku.post<{error?: string, addedUser: any}>('auth/register', singUpObj)\r\n    },\r\n    me() {\r\n        return instanceHeroku.post<AuthMeResponseType>('auth/me')\r\n    },\r\n    updateMe(updateMeObj: UpdateMeObjType) {\r\n        return instanceHeroku.put<{ updatedUser: AuthMeResponseType, error?: string }>('auth/me', updateMeObj)\r\n    },\r\n    recovery(email: string) {\r\n        return instanceHeroku.post<AuthResponseType>('auth/forgot', {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\n                        password recovery link:\r\n\t                <a href='https://maksimushka.github.io/cards/#/SetNewPassword/$token$'>link</a>\r\n\t            </div>`\r\n        }).then(res=>res.data)\r\n    },\r\n    setNewPassword(newPasswordObj: NewPasswordObjType) {\r\n        return instanceHeroku.post<AuthResponseType>('auth/set-new-password', newPasswordObj).then(res=>res.data)\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport Input from '../../components/input/Input';\r\nimport './RecoveryPass.scss'\r\nimport Button from '../../components/button/Button';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setRecovery} from '../../main/bll/auth-actions';\r\n\r\nconst RecoveryPass = () => {\r\n\r\n    const [triedToSubmit, setTriedToSubmit] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: { email: '' },\r\n        validationSchema: Yup.object({ email: Yup.string().email('Invalid email').required('Required') }),\r\n        onSubmit: values => {\r\n            dispatch(setRecovery(values.email))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className='RecoveryPassBlock'>\r\n            <h2>Recovery password</h2>\r\n            <div className='RecoveryPassBlock__form'>\r\n                <form onSubmit={formik.handleSubmit} action=\"\">\r\n                    <label htmlFor='email'>Enter your email:</label>\r\n                    <Input required type={'email'} {...formik.getFieldProps('email')} />\r\n\r\n                    {triedToSubmit && formik.touched.email && formik.errors.email\r\n                    && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                    <Button onClick={() => setTriedToSubmit(true)} type='submit'>Send</Button>\r\n                </form>\r\n                <p className='RecoveryPassBlock__text'>* We will send you an email with further instructions on password recovery</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecoveryPass;","import React from \"react\";\r\nimport s from \"./Error.module.css\"\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={s.error}>\r\n            <div className={s.errorNumber}>404</div>\r\n            <div className={s.errorMessage}>Page not found!</div>\r\n            <div className={s.errorMessage}>Choose another page</div>\r\n            <div className={s.cat}>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./Checkbox.module.css\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst Checkbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (onChangeChecked) {\r\n            onChangeChecked(e.currentTarget.checked)\r\n        }\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps}\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport Button from './button/Button';\r\nimport Input from './input/Input';\r\nimport Checkbox from './checkbox/Checkbox';\r\nimport s from './TestPage.module.scss'\r\n\r\nconst TestPage = () => {\r\n    return (\r\n        <div className={s.testPageBlock}>\r\n            <h1>Test component page</h1>\r\n            <div>\r\n                <h3>Button</h3>\r\n                <Button>Click</Button>\r\n            </div>\r\n            <div>\r\n                <h3>Input</h3>\r\n                <Input />\r\n            </div>\r\n            <div>\r\n                <h3>Checkbox</h3>\r\n                <Checkbox />\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestPage;","import React from 'react';\r\n\r\nimport './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n      <div className=\"lds-css\">\r\n        <div className=\"lds-double-ring\">\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport './Login.scss'\r\nimport Input from '../../components/input/Input';\r\nimport Checkbox from '../../components/checkbox/Checkbox';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../main/ui/routes/Routes';\r\nimport Spinner from '../../components/spinner/Spinner';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setLogin} from '../../main/bll/auth-actions';\r\nimport {AuthStateType} from '../../main/bll/authReducer';\r\nimport {RootStoreType} from '../../main/bll/store';\r\n\r\nconst Login: FC<any> = () => {\r\n  const dispatch = useDispatch()\r\n  const {isAuth,isLoading} = useSelector<RootStoreType,AuthStateType>(state => state.user)\r\n  const [email, setEmail] = useState<string>('nya-admin@nya.nya')\r\n  const [password, setPassword] = useState<string>('1qazxcvBG')\r\n  const [validEmail, setValidEmail] = useState<boolean>(false)\r\n  const [validPassword, setValidPassword] = useState<boolean>(false)\r\n  const [checkedInput, setCheckedInput] = useState<boolean>(false)\r\n\r\n  const setRememberMe = (checked: boolean) => {\r\n    setCheckedInput(checked)\r\n  }\r\n  const changeEmail = ({target}: ChangeEvent<HTMLInputElement>) => {\r\n    setValidEmail(false)\r\n    setEmail(target.value)\r\n  }\r\n  const changePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValidPassword(false)\r\n    setPassword(e.target.value)\r\n  }\r\n  const setIsValid = () => {\r\n    const pattern = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g);\r\n    if (!pattern.test(email)) {\r\n      setValidEmail(true)\r\n    }\r\n    if (password.length < 6) {\r\n      setValidPassword(true)\r\n    }\r\n  }\r\n\r\n  const onSubmit = () => {\r\n    if (!validEmail && !validPassword) {\r\n      // диспатчим санку с запросом\r\n      dispatch(setLogin({email: email, password: password, rememberMe: checkedInput}))\r\n    }\r\n  }\r\n  // если ты авторизован то редирект на главную страницу\r\n  if (isAuth) {\r\n    return <Redirect to={PATH.PROFILE}/>\r\n  }\r\n  return (\r\n      <section className=\"login\">\r\n        <div className=\"login__container\">\r\n          {isLoading ? (<Spinner/>)\r\n              : (<>\r\n                    <div>\r\n                      <h2>Login</h2>\r\n                      Email\r\n                      <Input type={'email'} value={email} onChange={changeEmail}/>\r\n                      Password\r\n                      <Input type={'password'} value={password} onChange={changePassword}/>\r\n                    </div>\r\n                    <Link to={PATH.SIGNUP}>Sign Up (Registration)</Link>\r\n                    <Checkbox onChangeChecked={setRememberMe}>Remember me!</Checkbox>\r\n                    <button onClick={onSubmit} onMouseDown={setIsValid}>Submit</button>\r\n                  </>\r\n              )}\r\n          {validEmail && <p className=\"error\">Enter valid email</p>}\r\n          {validPassword && <p className=\"error\">Enter longer password more then 6 symbols Now: {password.length}</p>}\r\n        </div>\r\n      </section>\r\n  )\r\n};\r\n\r\nexport default Login;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport './SignUp.scss';\r\nimport Input from \"../../components/input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registerTC} from \"../../main/bll/auth-actions\";\r\nimport {RootStoreType} from \"../../main/bll/store\";\r\nimport Spinner from \"../../components/spinner/Spinner\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../main/ui/routes/Routes\";\r\n\r\n\r\nconst SignUp = () => {\r\n    const isRegister = useSelector<RootStoreType, boolean>((state) => state.user.isRegister)\r\n    const isLoading = useSelector<RootStoreType, boolean>((state) => state.user.isLoading)\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const [passwordConfirmation, setPasswordConfirmation] = useState<string>(\"\")\r\n\r\n    const [errorsEmail, setErrorsEmail] = useState<string>('')\r\n    const [errorsPassword, setErrorsPassword] = useState<string>('')\r\n    const [errorsPasswordConfirmation, setErrorsPasswordConfirmation] = useState<string>('')\r\n\r\n\r\n    const onChangeHandlerEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n        setErrorsEmail('')\r\n    }\r\n    const onChangeHandlerPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n        setErrorsPassword('')\r\n    }\r\n    const onChangeHandlerDoublePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordConfirmation(e.currentTarget.value)\r\n        setErrorsPasswordConfirmation('')\r\n    }\r\n\r\n\r\n    const validateDate = () => {\r\n        // валидация формы\r\n        if (!email) {\r\n            return setErrorsEmail(\"Поле email не может быть пустым\")\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            return setErrorsEmail('Неправельный email адресс')\r\n        }\r\n        if (!password) {\r\n            return setErrorsPassword(\"Поле пароль не может быть пустым\")\r\n        } else if (password.length < 8) {\r\n            return setErrorsPassword('Пароль не может быть менее 8 сисмволов')\r\n        }\r\n        if (passwordConfirmation !== password) {\r\n            return setErrorsPasswordConfirmation(\"Неправельный пароль\")\r\n        } else if (passwordConfirmation === password) {\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n    const setIsValid = () => {\r\n        if (email && password && passwordConfirmation) {\r\n            dispatch(registerTC({email, password}))\r\n        }\r\n    }\r\n    // если зарегестрирован Redirect на Profile\r\n    if (isRegister) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading\r\n                ? <div className='wrapper'><Spinner/></div>\r\n                : <div className='wrapper'>\r\n                    <h2 className='wrapper_title'>Register</h2>\r\n                    <div className='from_text'>\r\n                        <Input className='form_text_input input'\r\n                               type=\"email\"\r\n                               onChange={onChangeHandlerEmail}\r\n                               value={email}\r\n                               onBlur={validateDate}\r\n                               placeholder='email'\r\n                        />\r\n                    </div>\r\n                    <div className='from_password'>\r\n                        <Input className='from_password_input input'\r\n                               type=\"password\"\r\n                               onChange={onChangeHandlerPassword}\r\n                               value={password}\r\n                               onBlur={validateDate}\r\n                               placeholder='password'\r\n                        />\r\n                    </div>\r\n                    <div className='from_password_double'>\r\n                        <Input className='from_password_double_input input'\r\n                               type=\"password\"\r\n                               onChange={onChangeHandlerDoublePassword}\r\n                               value={passwordConfirmation}\r\n                               onBlur={validateDate}\r\n                               placeholder='passwordConfirmation'\r\n                        />\r\n                    </div>\r\n                    <div className={errorsEmail ? 'errors' : ''}> {errorsEmail} </div>\r\n                    <div className={errorsPassword ? 'errors' : ''}> {errorsPassword} </div>\r\n                    <div className={errorsPasswordConfirmation ? 'errors' : ''}> {errorsPasswordConfirmation}</div>\r\n\r\n                    <button className='wrapper_btn_register btn'\r\n                            onClick={setIsValid}\r\n                            onMouseDown={validateDate}\r\n                    > register\r\n                    </button>\r\n                    <a href=\"http://localhost:3000/#/login\" className='wrapper_btn_signIn btn'>Sign In</a>\r\n                </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { PATH } from '../routes/Routes';\r\nimport './Header.scss'\r\n\r\nconst Header: React.FC = () => {\r\n    const navBarItems = [\r\n        {title: 'Profile', link: PATH.PROFILE},\r\n        {title: 'Login', link: PATH.LOGIN},\r\n        {title: 'SignUp', link: PATH.SIGNUP},\r\n        {title: 'TestPage', link: PATH.TESTPAGE},\r\n        {title: 'Recovery', link: PATH.RECOVERY}\r\n    ]\r\n    return (\r\n        <div className='headerBlock'>\r\n            <div className='headerBlock__navBar'>\r\n                {\r\n                    navBarItems.map(el => {\r\n                        // добавил key, была ошибка\r\n                        return <NavLink key={el.link} activeClassName='headerBlock__navBar-active' className='headerBlock__navBar-item' to={el.link}>{el.title}</NavLink>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport './SetNewPossword.scss'\r\nimport Input from '../../components/input/Input';\r\nimport Button from '../../components/button/Button';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup'\r\nimport {useDispatch} from 'react-redux';\r\nimport {setNewPassword} from '../../main/bll/auth-actions';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst SetNewPassword = () => {\r\n\r\n    const [triedToSubmit, setTriedToSubmit] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{token: string}>();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPass: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            password: Yup.string().min(8, 'Password must be 8 characters or more').required('Required'),\r\n            confirmPass: Yup.string().oneOf([Yup.ref(\"password\")], \"Passwords must match\").required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            const newPass = {password: values.password, resetPasswordToken: token}\r\n            dispatch(setNewPassword(newPass))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className='setNewPasswordBlock'>\r\n            <h2>Set new password</h2>\r\n            <div className='setNewPasswordBlock__form'>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <label htmlFor='password'>Enter password</label>\r\n                    <Input type={'password'} {...formik.getFieldProps('password')} />\r\n                    {triedToSubmit && formik.touched.password && formik.errors.password\r\n                    && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                    <label htmlFor='confirmPass'>Confirm password</label>\r\n                    <Input type={'password'} {...formik.getFieldProps('confirmPass')} />\r\n                    {triedToSubmit && formik.touched.confirmPass && formik.errors.confirmPass\r\n                    && <div style={{color: 'red'}} >{formik.errors.confirmPass}</div>}\r\n\r\n                    <Button onClick={() => setTriedToSubmit(true)} type={'submit'}>Submit</Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetNewPassword;","import React from \"react\";\r\nimport { Switch, Redirect, Route } from \"react-router-dom\";\r\nimport Profile from '../../../features/profile/Profile';\r\nimport RecoveryPass from '../../../features/recoveryPass/RecoveryPass';\r\nimport Error404 from '../error-404/Error404';\r\nimport TestPage from '../../../components/TestPage';\r\nimport Login from '../../../features/login/Login';\r\nimport SignUp from \"../../../features/signUp/SignUp\";\r\nimport Header from '../header/Header';\r\nimport SetNewPassword from '../../../features/setNewPassword/SetNewPassword';\r\n\r\n\r\nexport const PATH = {\r\n    PROFILE: \"/profile\",\r\n    LOGIN: '/login',\r\n    RECOVERY: '/recovery',\r\n    SIGNUP: \"/signUp\",\r\n    TESTPAGE: '/testPage',\r\n    SETNEWPASSWORD: '/SetNewPassword'\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Switch>\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n\r\n                <Route path={PATH.PROFILE} render={() => <Profile />}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login />}/>\r\n                <Route path={PATH.SIGNUP} render={() => <SignUp />}/>\r\n                <Route path={PATH.RECOVERY} render={() => <RecoveryPass />}/>\r\n                <Route path={PATH.TESTPAGE} render={() => <TestPage />}/>\r\n                <Route path={`${PATH.SETNEWPASSWORD}/:token`} render={() => <SetNewPassword />}/>\r\n\r\n                <Route render={() => <Error404 />}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import {AuthActionsTypes, AuthEnum} from './auth-actions'\r\n\r\nconst initialState = {\r\n  name: null as string | null,\r\n  _id: null as string | null,\r\n  avatar: null as string | null,\r\n  isLoading: false,\r\n  isAuth: false,\r\n  isRegister: false\r\n}\r\n\r\nexport type AuthStateType = typeof initialState\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionsTypes): AuthStateType => {\r\n  switch (action.type) {\r\n    case AuthEnum.LOGIN:\r\n      return {...state, ...action.payload}\r\n    case AuthEnum.LOGOUT:\r\n      return {...state, name: null, _id: null, avatar: null}\r\n    case AuthEnum.UPDATE_USER:\r\n      return {...state, ...action.payload}\r\n    case AuthEnum.IS_LOADING:\r\n      return {...state, ...action.payload}\r\n    case AuthEnum.IS_AUTH:\r\n      return {...state, ...action.payload}\r\n    case AuthEnum.IS_REGISTER:\r\n      return {...state, ...action.payload}\r\n    default:\r\n      return state\r\n  }\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {authReducer} from './authReducer'\r\nimport {AuthActionsTypes} from './auth-actions';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: authReducer,\r\n})\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers((applyMiddleware(thunkMiddleware))))\r\n\r\nexport type RootStoreType =ReturnType<typeof rootReducer>\r\n// типизация санки\r\nexport type ThunkType = ThunkAction<void, RootStoreType, unknown, AuthActionsTypes>\r\n\r\n\r\n\r\n// radux-devtuls\r\n// react-developerTuls\r\n\r\n","import React from 'react';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport Routes from './routes/Routes';\r\nimport {store} from '../bll/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <Routes/>\r\n          </Provider>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport { store } from './main/bll/store';\r\nimport App from './main/ui/App'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n          <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__1AkSZ\",\"errorNumber\":\"Error_errorNumber__1opLz\",\"errorMessage\":\"Error_errorMessage__24nPC\",\"errorCat\":\"Error_errorCat__3Su0W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"Input_superInput__x8D7A\",\"errorInput\":\"Input_errorInput__2Ro3K\",\"error\":\"Input_error__1lBcX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myButton\":\"Button_myButton__qvJ-r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__7Zy4m\",\"spanClassName\":\"Checkbox_spanClassName__25rR8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testPageBlock\":\"TestPage_testPageBlock__27EU8\"};"],"sourceRoot":""}